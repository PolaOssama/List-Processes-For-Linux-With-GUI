/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavenproject1;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.*;
import java.awt.Dimension;
import javax.swing.SwingUtilities;

/**+
 *
 * @author pola
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("process manager");

        jButton1.setText("List processes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Run process");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Stop process");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("List process by id");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Send signal to process");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton6.setText("List process by user");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addGap(27, 27, 27)
                        .addComponent(jButton5)
                        .addGap(0, 82, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try {
                    jTextArea1.setText(null);
                    String process;
                    long i=9993939399L;
                    String temb=String.valueOf(i);
                    temb="";
                    // getRuntime: Returns the runtime object associated with the current Java application.
                    // exec: Executes the specified string command in a separate process.
                    Process p = Runtime.getRuntime().exec("ps -few");
                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    while ((process = input.readLine()) != null) {
                            temb+=process+"\n"; // <-- Print all Process here line
                                                                                            // by line
                    }
                    jTextArea1.append(temb);
                    
                    input.close();
            } catch (Exception err) {
                    err.printStackTrace();
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
                    jTextArea1.setText(null);
                    String process;
                    long i=9993939399L;
                    String temb=String.valueOf(i);
                    temb="";
                    // getRuntime: Returns the runtime object associated with the current Java application.
                    // exec: Executes the specified string command in a separate process.
                    JFrame f=new JFrame();
                    String id=JOptionPane.showInputDialog(f,"Enter process");
                    Process p = Runtime.getRuntime().exec(id);
                    //Process p = Runtime.getRuntime().exec("kill -CONT "+id);
                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    while ((process = input.readLine()) != null) {
                            temb+=process+"\n"; // <-- Print all Process here line
                                                                                            // by line
                    }
                    jTextArea1.append(temb);
                    
                    input.close();
            } catch (Exception err) {
                    err.printStackTrace();
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
                    jTextArea1.setText(null);
                    String process;
                    long i=9993939399L;
                    String temb=String.valueOf(i);
                    temb="";
                    // getRuntime: Returns the runtime object associated with the current Java application.
                    // exec: Executes the specified string command in a separate process.
                    Process p = Runtime.getRuntime().exec("ps -e");
                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    while ((process = input.readLine()) != null) {
                            temb+=process+"\n"; // <-- Print all Process here line
                                                                                            // by line
                    }
                    jTextArea1.append(temb);
                    input.close();
            } catch (Exception err) {
                    err.printStackTrace();
            }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
                    jTextArea1.setText(null);
                    String process;
                    long i=9993939399L;
                    String temb=String.valueOf(i);
                    temb="";
                    // getRuntime: Returns the runtime object associated with the current Java application.
                    // exec: Executes the specified string command in a separate process.
                    JFrame f=new JFrame();
                    String username=JOptionPane.showInputDialog(f,"Enter username");
                    Process p = Runtime.getRuntime().exec("ps -u "+username);
                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    while ((process = input.readLine()) != null) {
                            temb+=process+"\n"; // <-- Print all Process here line
                                                                                            // by line
                    }
                    jTextArea1.append(temb);
                    input.close();
            } catch (Exception err) {
                    err.printStackTrace();
            }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
                    jTextArea1.setText(null);
                    String process;
                    long i=9993939399L;
                    String temb=String.valueOf(i);
                    temb="";
                    // getRuntime: Returns the runtime object associated with the current Java application.
                    // exec: Executes the specified string command in a separate process.
                    JFrame f=new JFrame();
                    String id=JOptionPane.showInputDialog(f,"Enter ID process");
                    Process p = Runtime.getRuntime().exec("kill -9 "+id);
                    //Process p = Runtime.getRuntime().exec("kill -STOP "+id);
                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                    while ((process = input.readLine()) != null) {
                            temb+=process+"\n"; // <-- Print all Process here line
                                                                                            // by line
                    }
                    if(p.getErrorStream()==null)
                    {
                        temb="the process was killed";
                    }
                    jTextArea1.append(temb);
                    
                    input.close();
            } catch (Exception err) {
                    err.printStackTrace();
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
                    jTextArea1.setText(null);
                    String process;
                    long i=9993939399L;
                    String temb=String.valueOf(i);
                    temb="";
                    // getRuntime: Returns the runtime object associated with the current Java application.
                    // exec: Executes the specified string command in a separate process.
                    JFrame f=new JFrame();
                    String id=JOptionPane.showInputDialog(f,"Enter ID process");
                    String num=JOptionPane.showInputDialog(f,"Enter signal number");
                    Process p = Runtime.getRuntime().exec("kill -"+num+" "+id);
                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                    while ((process = input.readLine()) != null) {
                            temb+=process+"\n"; // <-- Print all Process here line
                                                                                            // by line
                    }
                    
                    jTextArea1.append(temb);
                    
                    input.close();
            } catch (Exception err) {
                    err.printStackTrace();
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
